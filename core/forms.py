from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import AuthenticationForm

User = get_user_model()

class LoginForm(AuthenticationForm):
    username = forms.CharField(
        widget=forms.TextInput(attrs={"class": "form-control", "placeholder": "Email"})
    )
    password = forms.CharField(
        widget=forms.PasswordInput(attrs={"class": "form-control", "placeholder": "Password"})
    )
# from django import forms
# from django.contrib import admin
# from django.contrib.auth.models import Group
# from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
# from django.contrib.auth.forms import ReadOnlyPasswordHashField
# from django.core.exceptions import ValidationError

# from customauth.models import MyUser


# class UserCreationForm(forms.ModelForm):
#     """A form for creating new users. Includes all the required
#     fields, plus a repeated password."""

#     password1 = forms.CharField(label="Password", widget=forms.PasswordInput)
#     password2 = forms.CharField(
#         label="Password confirmation", widget=forms.PasswordInput
#     )

#     class Meta:
#         model = MyUser
#         fields = ["email", "date_of_birth"]

#     def clean_password2(self):
#         # Check that the two password entries match
#         password1 = self.cleaned_data.get("password1")
#         password2 = self.cleaned_data.get("password2")
#         if password1 and password2 and password1 != password2:
#             raise ValidationError("Passwords don't match")
#         return password2

#     def save(self, commit=True):
#         # Save the provided password in hashed format
#         user = super().save(commit=False)
#         user.set_password(self.cleaned_data["password1"])
#         if commit:
#             user.save()
#         return user


# class UserRegistrationForm(UserCreationForm):
#     email = forms.CharField(widget=forms.TextInput(attrs={"class": "form-control", "placeholder": "name@example.com"}))
#     first_name = forms.CharField(widget=forms.TextInput(attrs={"class": "form-control", "placeholder": "First Name"}))
#     last_name = forms.CharField(widget=forms.TextInput(attrs={"class": "form-control", "placeholder": "Last Name"}))
#     phone_number = forms.IntegerField(widget=forms.NumberInput(attrs={"class": "form-control", "placeholder": "1234567890"}))

#     def __init__(self, *args, **kwargs):
#         super().__init__(*args, **kwargs)
#         self.fields["password1"].widget.attrs.update({"class": "form-control"})
#         self.fields["password2"].widget.attrs.update({"class": "form-control"})

#     def is_valid(self) -> bool:
#         result = super().is_valid()
#         if result:
#             self.cleaned_data["username"] = self.cleaned_data["email"]
#         return result

#     class Meta(UserCreationForm.Meta):
#         fields = ["first_name", "last_name", "email", "phone_number"]


class UserRegistrationForm(UserCreationForm):
    email = forms.EmailField(
        widget=forms.EmailInput(attrs={"class": "form-control", "placeholder": "name@example.com"})
    )
    first_name = forms.CharField(
        widget=forms.TextInput(attrs={"class": "form-control", "placeholder": "First Name"})
    )
    last_name = forms.CharField(
        widget=forms.TextInput(attrs={"class": "form-control", "placeholder": "Last Name"})
    )
    phone_number = forms.CharField(
        widget=forms.TextInput(attrs={"class": "form-control", "placeholder": "1234567890"})
    )

    class Meta(UserCreationForm.Meta):
        model = User
        # username is omitted on purpose
        fields = ["first_name", "last_name", "email", "phone_number", "password1", "password2"]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # add Bootstrap class to the autogenerated password fields
        for key in ("password1", "password2"):
            self.fields[key].widget.attrs["class"] = "form-control"

    # store email in the username field before save()
    def save(self, commit=True):
        user = super().save(commit=False)
        user.username = self.cleaned_data["email"]
        if commit:
            user.save()
        return user